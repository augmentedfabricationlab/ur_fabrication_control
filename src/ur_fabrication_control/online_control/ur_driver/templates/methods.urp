def send_command_received(command_counter):
	enter_critical
	msg_length = 4 + 4
	socket_send_int(msg_length)
	socket_send_int(MSG_COMMAND_RECEIVED)
	socket_send_int(command_counter)
	exit_critical
end

def send_command_executed(command_counter):
	enter_critical
	msg_length = 4 + 4
	socket_send_int(msg_length)
	socket_send_int(MSG_COMMAND_EXECUTED)
	socket_send_int(command_counter)
	exit_critical
end

def send_current_pose_cartesian():
	enter_critical
	current_pose = get_forward_kin() # p[x,y,z,ax,ay,az]
	msg_length = 6 * 4 + 4
	socket_send_int(msg_length)
	socket_send_int(MSG_CURRENT_POSE_CARTESIAN)
	i = 0
	while (i < 6):
		if i < 3:
			socket_send_int(current_pose[i]*MULT*MM2M)
		else:
			socket_send_int(current_pose[i]*MULT)
		end
		i = i + 1
	end
	exit_critical
end

def send_current_pose_joints():
	enter_critical
	q = get_joint_positions()
	msg_length = 6 * 4 + 4
	socket_send_int(msg_length)
	socket_send_int(MSG_CURRENT_POSE_JOINT)
	i = 0
	while (i < 6):
		socket_send_int(q[i]*MULT)
		i = i + 1
	end
	exit_critical
end

def send_current_digital_in():
	di = [0,1,2,3,4,5,6,7]
	di_num = 8
	enter_critical
	msg_length = 4 + (4 + 4) * di_num
	socket_send_int(msg_length)
	socket_send_int(MSG_CURRENT_DIGITAL_IN)
	i = 0
	while i < di_num:
		value = get_digital_in(di[i])
		socket_send_int(di[i])
		socket_send_int(value)
		i = i + 1
	end
	exit_critical
end

def send_current_analog_in():
    ai = [0, 1]
    ai_num = 2
    enter_critical
    msg_length = 4 + (4 + 4) * ai_num
    socket_send_int(msg_length)
    socket_send_int(MSG_CURRENT_ANALOG_IN)
    i = 0
    while i < ai_num:
        value = get_analog_in(ai[i])
        socket_send_int(ai[i])
        socket_send_int(value*MULT)
        i = i + 1
    end
    exit_critical
end

def send_digital_in(number):
	enter_critical
	value = get_digital_in(number)
	msg_length = 4 + 4 + 4
	socket_send_int(msg_length)
	socket_send_int(MSG_DIGITAL_IN)
	socket_send_int(number)
	socket_send_int(value)
	exit_critical
end

def send_id_message():
	msg_length = 4 + ID_MESSAGE_LENGTH
	socket_send_int(msg_length)
	socket_send_int(MSG_IDENTIFIER)
	socket_send_string(ID_MESSAGE)
	textmsg("Sent message ID.")
	RUNNING = True
end

def read_and_identify():
	rcv = socket_read_binary_integer(2) # [2, msg_length, msg_id]
	if rcv[0] == 2:
		msg_length = rcv[1]
		msg_id = rcv[2]
		if msg_id == MSG_COMMAND:
			rcv2 = socket_read_binary_integer(2)
			msg_command_id = rcv2[1]
			command_counter = rcv2[2]

			BUFFER_COMMAND[WRITE_PTR] = msg_command_id
			BUFFER_COMMAND_COUNTER[WRITE_PTR] = command_counter
			
			if msg_command_id == COMMAND_ID_MOVEL:
				params = socket_read_binary_integer(6 + 4)
				BUFFER_POSE[WRITE_PTR] = p[params[1]/(MM2M*MULT), params[2]/(MM2M*MULT), params[3]/(MM2M*MULT), params[4]/MULT, params[5]/MULT, params[6]/MULT]
				BUFFER_PARAMS[WRITE_PTR] = p[params[7]/(MM2M*MULT), params[8]/(MM2M*MULT), params[9]/(MM2M*MULT), params[10]/MULT, 0, 0]
			elif msg_command_id == COMMAND_ID_MOVEJ:
				# we must make a pose, because of URScript restrictions
				params = socket_read_binary_integer(6 + 4)
				BUFFER_JOINT[WRITE_PTR] = p[params[1]/(MULT), params[2]/(MULT), params[3]/(MULT), params[4]/MULT, params[5]/MULT, params[6]/MULT]
				BUFFER_PARAMS[WRITE_PTR] = p[params[7]/(MM2M*MULT), params[8]/(MM2M*MULT), params[9]/(MM2M*MULT), params[10]/MULT, 0, 0]
			elif msg_command_id == COMMAND_ID_DIGITAL_OUT:
				params = socket_read_binary_integer(1+1)
				BUFFER_PARAMS[WRITE_PTR] = p[params[1], params[2], 0, 0, 0, 0] # number, boolean
			elif msg_command_id == COMMAND_ID_AIRPICK:
				params = socket_read_binary_integer(1)
				BUFFER_PARAMS[WRITE_PTR] = p[params[1], 0, 0, 0, 0, 0] # boolean
			elif msg_command_id == COMMAND_ID_WAIT:
				params = socket_read_binary_integer(1)
				#textmsg(params[1])
				BUFFER_PARAMS[WRITE_PTR] = p[params[1]/MULT, 0, 0, 0, 0, 0] # number
			elif msg_command_id == COMMAND_ID_TCP:
			     params = socket_read_binary_integer(6)
			     BUFFER_POSE[WRITE_PTR] = p[params[1]/(MM2M*MULT), params[2]/(MM2M*MULT), params[3]/(MM2M*MULT), params[4]/MULT, params[5]/MULT, params[6]/MULT]
			else: # msg_command_id == COMMAND_ID_POPUP:
			     textmsg("COMMAND_ID_POPUP")
			end

			send_command_received(command_counter)
			enter_critical
			while LOCK == 1:
				sleep(0.0001)
			end
			LOCK = 1
			BUFFER_LENGTH = BUFFER_LENGTH + 1
			WRITE_PTR = (WRITE_PTR + 1) % MAX_BUFFER_SIZE
			LOCK = 0
			exit_critical

		elif msg_id == MSG_CURRENT_POSE_CARTESIAN:
			send_current_pose_cartesian()
		elif msg_id == MSG_CURRENT_POSE_JOINT:
			send_current_pose_joints()
		elif msg_id == MSG_DIGITAL_IN:
			params = socket_read_binary_integer(1)
			send_digital_in(params[1])
		elif msg_id == MSG_DIGITAL_OUT:
			params = socket_read_binary_integer(1 + 1)
			if params[2] == 1:
				set_digital_out(params[1], True)
			else:
				set_digital_out(params[1], False)
			end
		elif msg_id == MSG_SPEED:
			params = socket_read_binary_integer(1)
			GLOBAL_SPEED = params[1]/MULT
			textmsg("Set GLOBAL_SPEED")
		elif msg_id == MSG_QUIT:
			textmsg("Received QUIT")
			return True
		else:
			textmsg("Received unknown message type")
		end
	end
	return False
end

def my_movel(pose, acc, vel, rad, time):
	if vel != 0:
		if rad != 0:
			movel(pose, v=vel, r=rad)
		else:
			if acc != 0:
				movel(pose, a=acc, v=vel)
			else:
				movel(pose, v=vel)
			end
		end
	else: # time != 0:
		if rad != 0:
			movel(pose, t=time, r=rad)
		else:
			movel(pose, t=time)
		end
	end
end

def my_movej(joints, acc, vel, rad, time):

	textmsg(acc)
	textmsg(vel)
	textmsg(rad)
	textmsg(time)
	
	if vel != 0:
		if rad != 0:
			movej(joints, v=vel, r=rad)
		else:
			if acc != 0:
				movej(joints, a=acc, v=vel)
			else:
				movej(joints, v=vel)
			end
		end
	else: # time != 0:
		if rad != 0:
			movej(joints, r=rad, t=time)
		else:
			movej(joints, t=time)
		end
	end
end

def execute_from_buffer():
	msg_command_id = BUFFER_COMMAND[READ_PTR]
	command_counter = BUFFER_COMMAND_COUNTER[READ_PTR]
	if msg_command_id == COMMAND_ID_MOVEL:
		pose = BUFFER_POSE[READ_PTR]
		params = BUFFER_PARAMS[READ_PTR]
		acc = params[0]
		vel = params[1] * GLOBAL_SPEED
		rad = params[2]
		time = params[3]
		my_movel(pose, acc, vel, rad, time)
	elif msg_command_id == COMMAND_ID_MOVEJ:
		jp = BUFFER_JOINT[READ_PTR]
		textmsg(jp)
		joints = [jp[0], jp[1], jp[2], jp[3], jp[4], jp[5]]
		textmsg(joints)
		params = BUFFER_PARAMS[READ_PTR]
		acc = params[0]
		vel = params[1] * GLOBAL_SPEED
		rad = params[2]
		time = params[3]
		my_movej(joints, acc, vel, rad, time)
	elif msg_command_id == COMMAND_ID_DIGITAL_OUT:
		params = BUFFER_PARAMS[READ_PTR]
		number = params[0]
		value = params[1]
		if value == 1:
			set_digital_out(number, True)
		else:
			set_digital_out(number, False)
		end
	elif msg_command_id == COMMAND_ID_AIRPICK:
		params = BUFFER_PARAMS[READ_PTR]
		value = params[0]
		if value == 1:
			rq_vacuum_grip(advanced_mode=True, maximum_vacuum=75, minimum_vacuum=25, timeout_ms=10, wait_for_object_detected=True, gripper_socket="1")
		else:
			rq_vacuum_release(advanced_mode=True, shutoff_distance_cm=1, wait_for_object_released=True, gripper_socket="1", pressure = 255, timeout = 255)
			sleep(0.1)
		end
	elif msg_command_id == COMMAND_ID_WAIT:
		params = BUFFER_PARAMS[READ_PTR]
		time_to_wait = params[0]
		textmsg("Sleeping")
		textmsg(time_to_wait)
		sleep(time_to_wait)
	elif msg_command_id == COMMAND_ID_TCP:
	   tcp = BUFFER_POSE[READ_PTR]
	   set_tcp(tcp)
	   textmsg("COMMAND_ID_TCP")
	else: # msg_command_id == COMMAND_ID_POPUP:
	   popup("Continue?", title="compas Popup!")
	end

	# send executed
	send_command_executed(command_counter)

	enter_critical
	while LOCK == 1:
		sleep(0.0001)
	end
	LOCK = 1
	READ_PTR = (READ_PTR + 1) % MAX_BUFFER_SIZE
	BUFFER_LENGTH = BUFFER_LENGTH - 1
	LOCK = 0
	exit_critical
end

thread thread_execute_from_buffer():
	while RUNNING:
		if BUFFER_LENGTH > 0:
			if LOCK == 0:
				execute_from_buffer()
			end
		end
		sync()
	end
	sync()
end

thread thread_publish_state():
	while RUNNING:
		send_current_pose_cartesian()
		send_current_pose_joints()
		send_current_digital_in()
		send_current_analog_in()
		sleep(0.05)
		sync()
	end
	sync()
end

def clear_buffer():
	enter_critical
	while LOCK == 1:
		sleep(0.0001)
	end
	LOCK = 1
	BUFFER_LENGTH = 0
	WRITE_PTR = 0
	READ_PTR = 0
	LOCK = 0
	exit_critical
end
